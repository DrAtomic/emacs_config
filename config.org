* TODO fixes
  at some point they changed source code blocks completion from tabbing '<el' to 'C-c C-,' I would like it to be able to do both. that way emacs< 27 can have all the features of this config
  
  org automatically expands all bullet points on startup now for emacs > 27, i dont like
* startup
Use-package
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" ."https://melpa.org/packages/") t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
* theme
#+begin_src emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (load-theme 'dracula t))
#+end_src
* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
      (setq dashboard-startup-banner 'logo)
      (setq dashboard-center-content t)
      (setq dashboard-items '((recents . 5))))
#+END_SRC
* tmp
set autosave fiels to .tmp folder
*requires tmp*
#+BEGIN_SRC emacs-lisp
(setq temporary-file-directory "~/.tmp/")
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC
* pretty emacs
** remove
remove ugly things and make things pretty
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)
(setq ring-bell-function 'ignore)
(setq scroll-conservatively 100)
#+END_SRC
* config
visit and reload config
** visit
#+BEGIN_SRC emacs-lisp
(defun config-visit ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/config.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** todo
#+BEGIN_SRC emacs-lisp
(defun todo-visit ()
  (interactive)
  (find-file "~/.Todo.org"))
(global-set-key (kbd "C-c t") 'todo-visit)
#+END_SRC
 #+END_SRC
* orgmode
** bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:init
(setq org-bullets-bullet-list
'( "◉" "●" "○" "•"))
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* which key
lint for emacs
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC
* term
terminal for emacs
#+BEGIN_SRC emacs-lisp
  (unless (version< emacs-version "27.1")
	  (use-package vterm
	    :ensure t))
#+END_SRC
* window
** split window
split window and follow
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** switch window
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l"))
  :bind
  ([remap other-window] . switch-window))
#+END_SRC
* delimiters
** electric pairs
wraps delimiters
#+BEGIN_SRC emacs-lisp
(setq electric-pair-pairs '(
                            (?\{ . ?\})
                            (?\[ . ?\])
                            (?\" . ?\")
                            (?\( . ?\))
                            ))
(electric-pair-mode 1)
#+END_SRC
** rainbow delimiters
   color delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (progn
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC
** paredit
a bit annoying a bit nice
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
    ;; enable in the *scratch* buffer
    (add-hook 'lisp-interaction-mode-hook #'paredit-mode)
    (add-hook 'ielm-mode-hook #'paredit-mode)
    (add-hook 'lisp-mode-hook #'paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
    (add-hook 'racket-mode-hook 'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'paredit-mode))
#+END_SRC
* multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
:ensure t

:bind ( "C-s-c C-s-c" . mc/edit-lines)
("C->" . mc/mark-next-like-this)
( "C-<" . mc/mark-previous-like-this)
("C-c C-<" . mc/mark-all-like-this))
#+END_SRC
* helm
its helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :config
    (defun daedreth/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
	(let ((ov (make-overlay (point-min) (point-max) nil nil t)))
	  (overlay-put ov 'window (selected-window))
	  (overlay-put ov 'face
		       (let ((bg-color (face-background 'default nil)))
			 `(:background ,bg-color :foreground ,bg-color)))
	  (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
	  helm-autoresize-min-height 40
	  helm-M-x-fuzzy-match t
	  helm-buffers-fuzzy-matching t
	  helm-recentf-fuzzy-match t
	  helm-semantic-fuzzy-match t
	  helm-imenu-fuzzy-match t
	  helm-split-window-in-side-p nil
	  helm-move-to-line-cycle-in-source nil
	  helm-ff-search-library-in-sexp t
	  helm-scroll-amount 8
	  helm-echo-input-in-header-line t)
    :init
    (helm-mode 1)

  (require 'helm-config)
  (helm-autoresize-mode 1)
  (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
  (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action))
#+END_SRC
* word and line wrap
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
  (add-hook 'after-init-hook 'global-company-mode))
  (setq org-confirm-babel-evaluate nil)
  (add-to-list 'org-structure-template-alist
  '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist
  '("p" . "src python")
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((dot . t))))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))

  (use-package company-jedi
    :ensure t
    :config

    (defun my/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))

    (add-hook 'python-mode-hook 'my/python-mode-hook))

  (use-package pyvenv
    :ensure t
    :hook ((python-mode . pyvenv-mode)))

  ;; https://github.com/DrAtomic/company-gambit.git
  (when (file-exists-p "~/.emacs.d/company-gambit/")
      (use-package company-gambit    
	:ensure nil
	:load-path "~/.emacs.d/company-gambit/"
	:config
	(defun my-scheme-mode-hook ()
	  (add-to-list 'company-backends 'company-gambit--backend))
	(add-hook 'scheme-mode-hook 'my-scheme-mode-hook)))
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
      :ensure t)
  (use-package yasnippet-snippets
    :ensure t)

  (yas-reload-all)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
  (yas-global-mode 1)

  (use-package common-lisp-snippets
    :ensure t)
#+END_SRC
* languages
** clojure
*requires clojure, clj, lein*
https://purelyfunctional.tv/guide/how-to-install-clojure/#linux
this is magic to me will figure out later
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :mode (("\\.clj\\'" . clojure-mode)
	   ("\\.edn\\'" . clojure-mode))
    :init
    (add-hook 'clojure-mode-hook #'yas-minor-mode)
    (add-hook 'clojure-mode-hook #'linum-mode)
    (add-hook 'clojure-mode-hook #'subword-mode)
    (add-hook 'clojure-mode-hook #'smartparens-mode)
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'clojure-mode-hook #'eldoc-mode)
    (add-hook 'clojure-mode-hook #'idle-highlight-mode))
  (use-package cider
    :ensure t
    :defer t
    :init (add-hook 'cider-mode-hook #'clj-refactor-mode)
    :diminish subword-mode
    :config
    (setq nrepl-log-messages t
	  cider-repl-display-in-current-window t
	  cider-repl-use-clojure-font-lock t
	  cider-prompt-save-file-on-load 'always-save
	  cider-font-lock-dynamically '(macro core function var)
	  nrepl-hide-special-buffers t
	  cider-overlays-use-font-lock t)
    (cider-repl-toggle-pretty-printing))
  (use-package clj-refactor
    :ensure t
    :init
    (add-hook 'clojure-mode-hook #'paredit-mode)
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'clojure-mode-hook (lambda () (clj-refactor-mode 1))))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable))
  (setq python-shell-completion-native-enable nil)
  (setq elpy-shell-use-project-root t )
  (setq elpy-rpc-virtualenv-path 'current)

  (setq elpy-shell-starting-directory (quote current-directory))
  (use-package pyenv-mode
    :ensure t)
; set this to whichever you have
  (setenv "WORKON_HOME" "~/.conda/envs")
  (pyvenv-mode 1)
#+END_SRC
** latex
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-save-query nil)
(setq org-latex-create-formula-image-program 'dvipng)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
** lisp
#+begin_SRC emacs-lisp
(use-package slime
:ensure t)
(setq inferior-lisp-program "gsi")
#+end_SRC
** racket
#+begin_src emacs-lisp
  (use-package racket-mode
	       :ensure t
	       :config
	       (add-hook 'racket-mode-hook #'racket-unicode-input-method-enable)
	       (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable))
#+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src
** gambit
   #+begin_src emacs-lisp
     (autoload 'gambit-inferior-mode "gambit" "Hook Gambit mode into cmuscheme.")
     (autoload 'gambit-mode "gambit" "Hook Gambit mode into scheme.")
     (add-hook 'inferior-scheme-mode-hook (function gambit-inferior-mode))
     (add-hook 'scheme-mode-hook (function gambit-mode))
     (setq scheme-program-name "gsi -:d-")

#+end_src
* magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))
#+end_src
* line number
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
#+end_src
* beamer
#+begin_src emacs-lisp
  (require 'ox-beamer)
(define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-interactive))))
#+end_src
* scmutils
#+begin_src emacs-lisp
(defun mechanics ()
  (interactive)
  (run-scheme 
    "/bin/scheme --library ~/Thirdparty/scmutils-20200810"))
#+end_src
* reveal
  #+begin_src emacs-lisp
    (use-package ox-reveal
      :ensure t)
      (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (setq org-reveal-mathjax t)
    (use-package htmlize
      :ensure t)
  #+end_src
* mark visible
  #+begin_src emacs-lisp
    (defface mmv-face
      '((t :background "maroon2" :foreground "white"))
      "Face used for showing the mark's position.")

    (defvar-local mmv-mark-overlay nil
      "The overlay for showing the mark's position.")

    (defvar-local mmv-is-mark-visible t
      "The overlay is visible only when this variable's value is t.")

    (defun mmv-draw-mark (&rest _)
      "Make the mark's position stand out by means of a one-character-long overlay.
       If the value of variable `mmv-is-mark-visible' is nil, the mark will be
       invisible."
      (unless mmv-mark-overlay
	(setq mmv-mark-overlay (make-overlay 0 0 nil t))
	(overlay-put mmv-mark-overlay 'face 'mmv-face))
      (let ((mark-position (mark t)))
	(cond
	 ((null mark-position) (delete-overlay mmv-mark-overlay))
	 ((and (< mark-position (point-max))
	       (not (eq ?\n (char-after mark-position))))
	  (overlay-put mmv-mark-overlay 'after-string nil)
	  (move-overlay mmv-mark-overlay mark-position (1+ mark-position)))
	 (t
	  ; This branch is called when the mark is at the end of a line or at the
	  ; end of the buffer. We use a bit of trickery to avoid the higlight
	  ; extending from the mark all the way to the right end of the frame.
	  (overlay-put mmv-mark-overlay 'after-string
		       (propertize " " 'face (overlay-get mmv-mark-overlay 'face)))
	  (move-overlay mmv-mark-overlay mark-position mark-position)))))

    (add-hook 'pre-redisplay-functions #'mmv-draw-mark)

    (defun mmv-toggle-mark-visibility ()
      "Toggles the mark's visiblity and redraws it (whether invisible or visible)."
      (interactive)
      (setq mmv-is-mark-visible (not mmv-is-mark-visible))
      (if mmv-is-mark-visible
	  (set-face-attribute 'mmv-face nil :background "maroon2" :foreground "white")
	(set-face-attribute 'mmv-face nil :background 'unspecified :foreground 'unspecified))
      (mmv-draw-mark))

    (global-set-key (kbd "C-c v") 'mmv-toggle-mark-visibility)
#+end_src
* visual regexp
  #+begin_src emacs-lisp
    (use-package visual-regexp
      :ensure t)  
#+end_src

